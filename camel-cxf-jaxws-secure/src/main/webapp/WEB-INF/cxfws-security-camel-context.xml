<?xml version="1.0" encoding="UTF-8"?>
<!--
  #%L
  Wildfly Camel :: Example :: Camel CXF JAX-WS Secure
  %%
  Copyright (C) 2013 - 2014 RedHat
  %%
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  #L%
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:cxf="http://camel.apache.org/schema/cxf"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                           http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://camel.apache.org/schema/cxf http://camel.apache.org/schema/cxf/camel-cxf.xsd
                           http://camel.apache.org/schema/spring http://camel.apache.org/schema/spring/camel-spring.xsd">

    <!-- If available, we use jboss.bind.address instead of localhost -->
    <cxf:cxfEndpoint
        id="cxfConsumer"
        address="http://{{sys:jboss.bind.address:localhost}}:8080/webservices/greeting-security-basic"
        serviceClass="org.wildfly.camel.examples.cxf.jaxws.GreetingService"
        loggingFeatureEnabled="true">
        <!-- Uncomment below element to use non-WS-SecPol CXF interceptor method -->
        <!-- cxf:properties>
            <entry key="ws-security.callback-handler">
                <ref bean="myPasswordCallback"/>
            </entry>
            <entry key="ws-security.encryption.properties" value="serviceKeystore.properties"/>
            <entry key="ws-security.signature.properties" value="serviceKeystore.properties"/>
        </cxf:properties> -->
        <!-- Comment below interceptors to use CXF interceptor method -->
        <cxf:outInterceptors>
            <ref bean="service_SignEncrypt_Response"/>
        </cxf:outInterceptors>
        <cxf:inInterceptors>
            <ref bean="service_VerifSignatureAndDecrypt_Request"/>
            <bean class="org.apache.cxf.ws.security.wss4j.DefaultCryptoCoverageChecker"/>
        </cxf:inInterceptors>
    </cxf:cxfEndpoint>

    <!-- If available, we use jboss.bind.address instead of localhost -->
    <cxf:cxfEndpoint
        id="cxfProducer"
        address="http://{{sys:jboss.bind.address:localhost}}:8080/webservices/greeting-security-basic"
        serviceClass="org.wildfly.camel.examples.cxf.jaxws.GreetingService"
        loggingFeatureEnabled="true">
        <cxf:properties>
            <entry key="username" value="testUser"/>
            <entry key="password" value="testPassword1+"/>
            <!-- Uncomment below element to use non-WS-SecPol CXF interceptor method -->
            <!-- entry key="ws-security.callback-handler" value="org.wildfly.camel.examples.cxf.jaxws.ClientKeystorePasswordCallback"/>
            <entry key="ws-security.encryption.properties" value="clientKeystore.properties"/>
            <entry key="ws-security.signature.properties" value="clientKeystore.properties"/>
            <entry key="ws-security.encryption.username" value="client-privatekey"/-->
        </cxf:properties>
        <!-- Comment below interceptors to use CXF interceptor method -->
        <cxf:inInterceptors>
            <ref bean="client_VerifSignatureAndDecrypt_Response"/>
            <bean class="org.apache.cxf.ws.security.wss4j.DefaultCryptoCoverageChecker"/>
        </cxf:inInterceptors>
        <cxf:outInterceptors>
            <ref bean="client_SignEncrypt_Request"/>
        </cxf:outInterceptors>
    </cxf:cxfEndpoint>

    <bean class="org.apache.cxf.interceptor.security.JAASLoginInterceptor" id="authenticationInterceptor">
        <property name="contextName" value="other"/>
    </bean>

    <!-- from this example: https://access.redhat.com/solutions/318403 -->
    <bean class="org.apache.cxf.interceptor.security.SimpleAuthorizingInterceptor" id="authorizationInterceptor">
        <property name="methodRolesMap">
            <map>
                <entry key="greet" value="testRole"/>
            </map>
        </property>
        <property name="globalRoles" value="adminRole testRole"/>
    </bean>

    <bean id="myPasswordCallback"
          class="org.wildfly.camel.examples.cxf.jaxws.ServiceKeystorePasswordCallback" />

    <!--
        This bean is needed only if you're using the CXF interceptor method (per above
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        WSS4JInInterceptor for decrypting and validating the signature of the
        SOAP request.
    -->
    <bean id="service_VerifSignatureAndDecrypt_Request"
          class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor">
        <constructor-arg>
            <map>
                <entry key="action" value="Signature Encrypt"/>
                <entry key="signaturePropFile" value="serviceKeystore.properties"/>
                <entry key="decryptionPropFile" value="serviceKeystore.properties"/>
                <entry key="passwordCallbackClass" value="org.wildfly.camel.examples.cxf.jaxws.ServiceKeystorePasswordCallback"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean>

    <!--
        This bean is needed only if you're using the CXF interceptor method (per above
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        WSS4JOutInterceptor for encoding and signing the SOAP response.
    -->
    <bean id="service_SignEncrypt_Response"
          class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor">
        <constructor-arg>
            <map>
                <entry key="action" value="Signature Encrypt"/>
                <entry key="user" value="service-privatekey"/>
                <entry key="signaturePropFile" value="serviceKeystore.properties"/>
                <entry key="encryptionPropFile" value="serviceKeystore.properties"/>
                <entry key="encryptionUser" value="useReqSigCert"/>
                <entry key="passwordCallbackClass" value="org.wildfly.camel.examples.cxf.jaxws.ServiceKeystorePasswordCallback"/>
                <entry key="signatureParts" value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionParts" value="{Element}{http://www.w3.org/2000/09/xmldsig#}Signature;{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean>

    <!--
        This bean is needed only if you're using the CXF interceptor method (per above
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        This bean is an Out interceptor which will add sign the body
        and then encrypt the body.
        It uses 3DES as the symmetric key algorithm.
    -->
    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor"
          id="client_SignEncrypt_Request">
        <constructor-arg>
            <map>
                <entry key="action" value="Signature Encrypt"/>
                <entry key="user" value="client-privatekey"/>
                <entry key="signaturePropFile" value="clientKeystore.properties"/>
                <entry key="encryptionPropFile" value="clientKeystore.properties"/>
                <entry key="encryptionUser" value="service-pubkey"/>
                <entry key="passwordCallbackClass" value="org.wildfly.camel.examples.cxf.jaxws.ClientKeystorePasswordCallback"/>
                <entry key="signatureParts" value="{Element}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionParts" value="{Element}{http://www.w3.org/2000/09/xmldsig#}Signature;{Content}{http://schemas.xmlsoap.org/soap/envelope/}Body"/>
                <entry key="encryptionSymAlgorithm" value="http://www.w3.org/2001/04/xmlenc#tripledes-cbc"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean>

    <!--
        This bean is needed only if you're using the CXF interceptor method (per above
        configuration, it's ignored if you're using the WS-SecurityPolicy method.)

        This bean is an In interceptor which will validate a signed and encrypted response.
    -->
    <bean class="org.apache.cxf.ws.security.wss4j.WSS4JInInterceptor"
          id="client_VerifSignatureAndDecrypt_Response">
        <constructor-arg>
            <map>
                <entry key="action" value="Signature Encrypt"/>
                <entry key="signaturePropFile" value="clientKeystore.properties"/>
                <entry key="decryptionPropFile" value="clientKeystore.properties"/>
                <entry key="passwordCallbackClass" value="org.wildfly.camel.examples.cxf.jaxws.ClientKeystorePasswordCallback"/>
                <entry key="encryptionKeyTransportAlgorithm" value="http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p"/>
                <entry key="signatureAlgorithm" value="http://www.w3.org/2000/09/xmldsig#rsa-sha1"/>
            </map>
        </constructor-arg>
    </bean>

    <bean class="org.wildfly.camel.examples.cxf.jaxws.GreetingsProcessor" id="greetingsProcessor"/>

    <camelContext id="cxfws-secure-camel-context" xmlns="http://camel.apache.org/schema/spring">
        <!--
             This route defines a CXF producer endpoint which invokes a greeting web service.

             CamelCxfWsServlet sends the required message and name parameters to the service by populating them
             within the message exchange body.
        -->
        <route id="directToCxfBeanRoute">
            <from id="directConsumer" uri="direct:start"/>
            <log id="logDirectInput" message="Received direct message: ${body}" loggingLevel="INFO"/>
            <to id="cxfwsProducer" uri="cxf:bean:cxfProducer"/>
            <log id="logResponse" message="Received SOAP response message: ${body}" loggingLevel="INFO"/>
        </route>

        <!--
            This route defines a CXF consumer endpoint which handles requests made to the greeting web service.

            GreetingsProcessor constructs a String greeting response to return back to the JAX-WS client.
        -->
        <route id="cxfConsumerToProcessorRoute">
            <from id="cxfConsumer" uri="cxf:bean:cxfConsumer"/>
            <log id="logCxfInput" message="Received CXF Bean message: ${body}" loggingLevel="INFO"/>
            <process id="processor" ref="greetingsProcessor"/>
        </route>
    </camelContext>
</beans>
